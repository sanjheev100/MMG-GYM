{"version":3,"file":"static/js/97.bda5e2cc.chunk.js","mappings":"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","sources":["pages/admin/AllCustomers.js","../node_modules/@babel/runtime/helpers/esm/readOnlyError.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  getAllCustomer,\r\n  getSearchResult,\r\n  getSingleMember,\r\n  getTotalCustomerCount,\r\n} from '../../api/customer'\r\nimport { Button, Container, Row, Spinner } from 'react-bootstrap'\r\nimport { Pagination } from 'antd'\r\nimport {\r\n  CustomerEditModal,\r\n  CustomerViewModal,\r\n  MemberTable,\r\n} from '../../components'\r\nimport { toast } from 'react-toastify'\r\nimport './AllCustomer.css'\r\nimport { useNavigate } from 'react-router-dom'\r\nconst AllCustomers = () => {\r\n  const { user, filterApplied } = useSelector((state) => ({ ...state }))\r\n\r\n  const [allMembers, setMembers] = useState([])\r\n  const [totalCustomerCount, setTotalCustomerCount] = useState(0)\r\n  const [page, setPage] = useState(1)\r\n\r\n  const [sortBy, setSortBy] = useState('')\r\n  const [keyWord, setKeyword] = useState('')\r\n  const [buttonloading, setButtonLoading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    if (user && user != null) {\r\n      if (user.role === 'admin') {\r\n        // pass\r\n      } else if (user.role === 'manager') {\r\n        // continue\r\n      } else {\r\n        dispatch({ type: 'LOGOUT', payload: null })\r\n        navigate('/login')\r\n        return\r\n      }\r\n    }\r\n  }, [user])\r\n\r\n  useEffect(() => {\r\n    loadCustomerCount()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    loadAllCustomers()\r\n  }, [page])\r\n\r\n  const loadCustomerCount = async () => {\r\n    getTotalCustomerCount(user.token).then((res) => {\r\n      setTotalCustomerCount(res.data)\r\n      console.log(res.data)\r\n      // toast.success('Total Customer Count Loaded')\r\n    })\r\n  }\r\n\r\n  const perPage = 10\r\n  const loadAllCustomers = () => {\r\n    const payload = {\r\n      sort: 'gymId',\r\n      order: 'asc',\r\n      page,\r\n      perPage,\r\n    }\r\n    dispatch({ type: 'FILTER_APPLIED', payload: false })\r\n\r\n    getAllCustomer(user.token, payload)\r\n      .then((res) => {\r\n        setMembers(res.data)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err)\r\n        toast.error(err.response.data.err)\r\n      })\r\n  }\r\n\r\n  const handleSearch = () => {\r\n    if (keyWord == '' || sortBy == '') {\r\n      return toast.error('Please Fill All Required Fields in Format')\r\n    }\r\n    setMembers([])\r\n    searchByFilter()\r\n  }\r\n\r\n  const searchByFilter = () => {\r\n    var payload = {\r\n      keyWord,\r\n      sortBy,\r\n    }\r\n    setButtonLoading(true)\r\n    dispatch({ type: 'FILTER_APPLIED', payload: true })\r\n\r\n    if (sortBy == 'gymId' || sortBy == 'phone') {\r\n      console.log(parseInt(keyWord))\r\n      if (parseInt(keyWord) == 'NaN') {\r\n        return toast.error('Please Enter Valid Number Without e')\r\n      } else {\r\n        keyWord = keyWord.toLowerCase()\r\n      }\r\n    }\r\n\r\n    getSearchResult(user.token, payload)\r\n      .then((res) => {\r\n        setMembers(res.data)\r\n        console.log(res.data)\r\n        setTotalCustomerCount(allMembers.length)\r\n        console.log(res.data)\r\n        setButtonLoading(false)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err)\r\n        setButtonLoading(false)\r\n\r\n        toast.error(err.response.data.err)\r\n      })\r\n  }\r\n\r\n  const handleClearFilter = () => {\r\n    dispatch({\r\n      type: 'SEARCH_QUERY',\r\n      payload: { text: '' },\r\n    })\r\n    setKeyword('')\r\n    setSortBy('')\r\n    setMembers([])\r\n    loadAllCustomers()\r\n    loadCustomerCount()\r\n  }\r\n\r\n  var inputType = 'text'\r\n  if (sortBy == 'gymId' || sortBy == 'phone') {\r\n    inputType = 'number'\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        {filterApplied && (\r\n          <Button\r\n            className='clearbtn btn-sm'\r\n            style={{ marginTop: '-10px' }}\r\n            onClick={handleClearFilter}\r\n            style={{\r\n              position: 'fixed',\r\n              bottom: 150,\r\n              right: 20,\r\n              zIndex: 2,\r\n            }}\r\n          >\r\n            Clear\r\n          </Button>\r\n        )}\r\n        <h4 className='text-center'>Customers List</h4>\r\n        <div>\r\n          <form className='form-inline my-2 my-lg-0' onSubmit={handleSearch}>\r\n            <div\r\n              className='input-group mb-3'\r\n              style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                justifyContent: 'space-between',\r\n              }}\r\n            >\r\n              <select\r\n                style={{\r\n                  background: '#48afea',\r\n                  borderColor: 'none',\r\n                  borderRadius: '5px',\r\n                  color: 'white',\r\n                  height: '40px',\r\n                }}\r\n                required={true}\r\n                value={sortBy}\r\n                onChange={(e) => setSortBy(e.target.value)}\r\n\r\n                // name='active'\r\n                // value={active}\r\n                // className='form-control'\r\n                // onChange={handleChange}\r\n              >\r\n                <option\r\n                  value=''\r\n                  style={{ color: 'black', backgroundColor: 'white' }}\r\n                >\r\n                  select filter\r\n                </option>\r\n                <option\r\n                  style={{ color: 'black', backgroundColor: 'white' }}\r\n                  value='name'\r\n                >\r\n                  Name\r\n                </option>\r\n                <option\r\n                  style={{ color: 'black', backgroundColor: 'white' }}\r\n                  value='gymId'\r\n                >\r\n                  Gym Id\r\n                </option>\r\n                <option\r\n                  style={{ color: 'black', backgroundColor: 'white' }}\r\n                  value='phone'\r\n                >\r\n                  Phone\r\n                </option>\r\n              </select>\r\n              <input\r\n                type={inputType}\r\n                value={keyWord}\r\n                style={{ height: '40px', flexGrow: 1 }}\r\n                onChange={(e) => setKeyword(e.target.value)}\r\n                disabled={!sortBy}\r\n                placeholder={!sortBy ? 'select filter' : `Search ${sortBy}`}\r\n              />\r\n              {buttonloading ? (\r\n                <Button\r\n                  variant='primary'\r\n                  className='btn-sm btn-danger mt-3'\r\n                  disabled\r\n                  style={{ top: '-8px', height: '40px' }}\r\n                >\r\n                  <Spinner\r\n                    as='span'\r\n                    animation='grow'\r\n                    size='sm'\r\n                    role='status'\r\n                    aria-hidden='true'\r\n                  />\r\n                  {'  '}\r\n                  Loading...\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  className='btn-raised mt-3'\r\n                  variant='primary'\r\n                  onClick={() => handleSearch()}\r\n                  style={{ top: '-8px', height: '40px' }}\r\n                >\r\n                  Search\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </form>\r\n        </div>\r\n        {!allMembers.length ? (\r\n          <p style={{ color: 'black' }}>No Customers Found</p>\r\n        ) : (\r\n          <Container>\r\n            <div>\r\n              <table className='table table-bordered'>\r\n                <thead className='thead-light'>\r\n                  <tr>\r\n                    <th scope='col' style={{ color: 'black' }}>\r\n                      Gym Id\r\n                    </th>\r\n                    <th scope='col' style={{ color: 'black' }}>\r\n                      Name\r\n                    </th>\r\n                    <th scope='col' style={{ color: 'black' }}>\r\n                      Phone\r\n                    </th>\r\n                    <th scope='col' style={{ color: 'black' }}>\r\n                      Validity\r\n                    </th>\r\n                    <th scope='col' style={{ color: 'black' }}>\r\n                      Active\r\n                    </th>\r\n                    <th scope='col' style={{ color: 'black' }}>\r\n                      Paid\r\n                    </th>\r\n                    <th scope='col' style={{ color: 'black' }}>\r\n                      Edit/Remove\r\n                    </th>\r\n                    <th scope='col' style={{ color: 'black' }}>\r\n                      View\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {allMembers.map((m) => (\r\n                    <MemberTable\r\n                      member={m}\r\n                      key={m._id}\r\n                      loadAllCustomers={loadAllCustomers}\r\n                    />\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </Container>\r\n        )}\r\n      </Container>\r\n      <Row>\r\n        <nav className='col-md-4 offset-md-4 text-center pt-2 p-3'>\r\n          <Pagination\r\n            current={page}\r\n            total={Math.ceil(totalCustomerCount / 10) * 10}\r\n            onChange={(value) => setPage(value)}\r\n          />\r\n        </nav>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AllCustomers\r\n","export default function _readOnlyError(name) {\n  throw new TypeError(\"\\\"\" + name + \"\\\" is read-only\");\n}"],"names":["useSelector","state","user","filterApplied","useState","allMembers","setMembers","totalCustomerCount","setTotalCustomerCount","page","setPage","sortBy","setSortBy","keyWord","setKeyword","buttonloading","setButtonLoading","dispatch","useDispatch","navigate","useNavigate","useEffect","role","type","payload","loadCustomerCount","loadAllCustomers","getTotalCustomerCount","token","then","res","data","console","log","sort","order","perPage","getAllCustomer","catch","err","toast","response","handleSearch","searchByFilter","parseInt","toLowerCase","name","TypeError","getSearchResult","length","inputType","Container","Button","className","style","marginTop","onClick","text","position","bottom","right","zIndex","onSubmit","display","flexDirection","alignItems","justifyContent","background","borderColor","borderRadius","color","height","required","value","onChange","e","target","backgroundColor","flexGrow","disabled","placeholder","variant","top","Spinner","as","animation","size","scope","map","m","member","_id","Row","current","total","Math","ceil"],"sourceRoot":""}